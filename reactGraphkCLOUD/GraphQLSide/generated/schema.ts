// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Drum extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Drum entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Drum entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Drum", id.toString(), this);
  }

  static load(id: string): Drum | null {
    return store.get("Drum", id) as Drum | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sensor(): string | null {
    let value = this.get("sensor");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sensor(value: string | null) {
    if (value === null) {
      this.unset("sensor");
    } else {
      this.set("sensor", Value.fromString(value as string));
    }
  }

  get classification(): string | null {
    let value = this.get("classification");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set classification(value: string | null) {
    if (value === null) {
      this.unset("classification");
    } else {
      this.set("classification", Value.fromString(value as string));
    }
  }

  get type(): string | null {
    let value = this.get("type");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (value === null) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(value as string));
    }
  }

  get date_unix(): BigInt | null {
    let value = this.get("date_unix");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set date_unix(value: BigInt | null) {
    if (value === null) {
      this.unset("date_unix");
    } else {
      this.set("date_unix", Value.fromBigInt(value as BigInt));
    }
  }

  get place_of_occurence(): string | null {
    let value = this.get("place_of_occurence");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set place_of_occurence(value: string | null) {
    if (value === null) {
      this.unset("place_of_occurence");
    } else {
      this.set("place_of_occurence", Value.fromString(value as string));
    }
  }

  get dose_rate(): BigInt | null {
    let value = this.get("dose_rate");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dose_rate(value: BigInt | null) {
    if (value === null) {
      this.unset("dose_rate");
    } else {
      this.set("dose_rate", Value.fromBigInt(value as BigInt));
    }
  }

  get wasteAcceptanceRequest(): string | null {
    let value = this.get("wasteAcceptanceRequest");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set wasteAcceptanceRequest(value: string | null) {
    if (value === null) {
      this.unset("wasteAcceptanceRequest");
    } else {
      this.set("wasteAcceptanceRequest", Value.fromString(value as string));
    }
  }

  get wasteAcceptanceHandover(): string | null {
    let value = this.get("wasteAcceptanceHandover");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set wasteAcceptanceHandover(value: string | null) {
    if (value === null) {
      this.unset("wasteAcceptanceHandover");
    } else {
      this.set("wasteAcceptanceHandover", Value.fromString(value as string));
    }
  }

  get currentStatus(): string | null {
    let value = this.get("currentStatus");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set currentStatus(value: string | null) {
    if (value === null) {
      this.unset("currentStatus");
    } else {
      this.set("currentStatus", Value.fromString(value as string));
    }
  }

  get drumHistory(): string | null {
    let value = this.get("drumHistory");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set drumHistory(value: string | null) {
    if (value === null) {
      this.unset("drumHistory");
    } else {
      this.set("drumHistory", Value.fromString(value as string));
    }
  }
}

export class DrumHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DrumHistory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DrumHistory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DrumHistory", id.toString(), this);
  }

  static load(id: string): DrumHistory | null {
    return store.get("DrumHistory", id) as DrumHistory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get drum(): string {
    let value = this.get("drum");
    return value.toString();
  }

  set drum(value: string) {
    this.set("drum", Value.fromString(value));
  }

  get inTransitData(): string | null {
    let value = this.get("inTransitData");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set inTransitData(value: string | null) {
    if (value === null) {
      this.unset("inTransitData");
    } else {
      this.set("inTransitData", Value.fromString(value as string));
    }
  }

  get packagingData(): string | null {
    let value = this.get("packagingData");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set packagingData(value: string | null) {
    if (value === null) {
      this.unset("packagingData");
    } else {
      this.set("packagingData", Value.fromString(value as string));
    }
  }

  get temporaryStorageData(): string | null {
    let value = this.get("temporaryStorageData");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set temporaryStorageData(value: string | null) {
    if (value === null) {
      this.unset("temporaryStorageData");
    } else {
      this.set("temporaryStorageData", Value.fromString(value as string));
    }
  }

  get takingOverData(): string | null {
    let value = this.get("takingOverData");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set takingOverData(value: string | null) {
    if (value === null) {
      this.unset("takingOverData");
    } else {
      this.set("takingOverData", Value.fromString(value as string));
    }
  }
}

export class Sensor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Sensor entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Sensor entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Sensor", id.toString(), this);
  }

  static load(id: string): Sensor | null {
    return store.get("Sensor", id) as Sensor | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get drum(): string | null {
    let value = this.get("drum");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set drum(value: string | null) {
    if (value === null) {
      this.unset("drum");
    } else {
      this.set("drum", Value.fromString(value as string));
    }
  }

  get sensorData(): Array<string> | null {
    let value = this.get("sensorData");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set sensorData(value: Array<string> | null) {
    if (value === null) {
      this.unset("sensorData");
    } else {
      this.set("sensorData", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class SensorData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SensorData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SensorData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SensorData", id.toString(), this);
  }

  static load(id: string): SensorData | null {
    return store.get("SensorData", id) as SensorData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sensor(): string | null {
    let value = this.get("sensor");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sensor(value: string | null) {
    if (value === null) {
      this.unset("sensor");
    } else {
      this.set("sensor", Value.fromString(value as string));
    }
  }

  get currentStatus(): string | null {
    let value = this.get("currentStatus");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set currentStatus(value: string | null) {
    if (value === null) {
      this.unset("currentStatus");
    } else {
      this.set("currentStatus", Value.fromString(value as string));
    }
  }

  get drum(): string | null {
    let value = this.get("drum");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set drum(value: string | null) {
    if (value === null) {
      this.unset("drum");
    } else {
      this.set("drum", Value.fromString(value as string));
    }
  }

  get time_recorded(): BigInt | null {
    let value = this.get("time_recorded");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set time_recorded(value: BigInt | null) {
    if (value === null) {
      this.unset("time_recorded");
    } else {
      this.set("time_recorded", Value.fromBigInt(value as BigInt));
    }
  }

  get GPS_longitude(): BigInt | null {
    let value = this.get("GPS_longitude");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set GPS_longitude(value: BigInt | null) {
    if (value === null) {
      this.unset("GPS_longitude");
    } else {
      this.set("GPS_longitude", Value.fromBigInt(value as BigInt));
    }
  }

  get GPS_Latitude(): BigInt | null {
    let value = this.get("GPS_Latitude");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set GPS_Latitude(value: BigInt | null) {
    if (value === null) {
      this.unset("GPS_Latitude");
    } else {
      this.set("GPS_Latitude", Value.fromBigInt(value as BigInt));
    }
  }

  get accX(): BigInt | null {
    let value = this.get("accX");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set accX(value: BigInt | null) {
    if (value === null) {
      this.unset("accX");
    } else {
      this.set("accX", Value.fromBigInt(value as BigInt));
    }
  }

  get accZ(): BigInt | null {
    let value = this.get("accZ");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set accZ(value: BigInt | null) {
    if (value === null) {
      this.unset("accZ");
    } else {
      this.set("accZ", Value.fromBigInt(value as BigInt));
    }
  }

  get temp(): BigInt | null {
    let value = this.get("temp");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set temp(value: BigInt | null) {
    if (value === null) {
      this.unset("temp");
    } else {
      this.set("temp", Value.fromBigInt(value as BigInt));
    }
  }

  get humidity(): BigInt | null {
    let value = this.get("humidity");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set humidity(value: BigInt | null) {
    if (value === null) {
      this.unset("humidity");
    } else {
      this.set("humidity", Value.fromBigInt(value as BigInt));
    }
  }

  get radio(): BigInt | null {
    let value = this.get("radio");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set radio(value: BigInt | null) {
    if (value === null) {
      this.unset("radio");
    } else {
      this.set("radio", Value.fromBigInt(value as BigInt));
    }
  }

  get alarm(): string | null {
    let value = this.get("alarm");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set alarm(value: string | null) {
    if (value === null) {
      this.unset("alarm");
    } else {
      this.set("alarm", Value.fromString(value as string));
    }
  }
}

export class InTransitData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save InTransitData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save InTransitData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("InTransitData", id.toString(), this);
  }

  static load(id: string): InTransitData | null {
    return store.get("InTransitData", id) as InTransitData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get carrier(): string | null {
    let value = this.get("carrier");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set carrier(value: string | null) {
    if (value === null) {
      this.unset("carrier");
    } else {
      this.set("carrier", Value.fromString(value as string));
    }
  }

  get date_unix(): BigInt | null {
    let value = this.get("date_unix");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set date_unix(value: BigInt | null) {
    if (value === null) {
      this.unset("date_unix");
    } else {
      this.set("date_unix", Value.fromBigInt(value as BigInt));
    }
  }

  get transportation_schedule(): string | null {
    let value = this.get("transportation_schedule");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transportation_schedule(value: string | null) {
    if (value === null) {
      this.unset("transportation_schedule");
    } else {
      this.set("transportation_schedule", Value.fromString(value as string));
    }
  }

  get status(): string | null {
    let value = this.get("status");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (value === null) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(value as string));
    }
  }

  get drum(): string {
    let value = this.get("drum");
    return value.toString();
  }

  set drum(value: string) {
    this.set("drum", Value.fromString(value));
  }
}

export class PackagingData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PackagingData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PackagingData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PackagingData", id.toString(), this);
  }

  static load(id: string): PackagingData | null {
    return store.get("PackagingData", id) as PackagingData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get drum(): string {
    let value = this.get("drum");
    return value.toString();
  }

  set drum(value: string) {
    this.set("drum", Value.fromString(value));
  }

  get date_unix(): BigInt | null {
    let value = this.get("date_unix");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set date_unix(value: BigInt | null) {
    if (value === null) {
      this.unset("date_unix");
    } else {
      this.set("date_unix", Value.fromBigInt(value as BigInt));
    }
  }

  get classification(): string | null {
    let value = this.get("classification");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set classification(value: string | null) {
    if (value === null) {
      this.unset("classification");
    } else {
      this.set("classification", Value.fromString(value as string));
    }
  }

  get type(): string | null {
    let value = this.get("type");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (value === null) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(value as string));
    }
  }

  get place_of_occurence(): string | null {
    let value = this.get("place_of_occurence");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set place_of_occurence(value: string | null) {
    if (value === null) {
      this.unset("place_of_occurence");
    } else {
      this.set("place_of_occurence", Value.fromString(value as string));
    }
  }

  get wasteAcceptanceRequest(): string | null {
    let value = this.get("wasteAcceptanceRequest");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set wasteAcceptanceRequest(value: string | null) {
    if (value === null) {
      this.unset("wasteAcceptanceRequest");
    } else {
      this.set("wasteAcceptanceRequest", Value.fromString(value as string));
    }
  }
}

export class TemporaryStorageData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save TemporaryStorageData entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TemporaryStorageData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TemporaryStorageData", id.toString(), this);
  }

  static load(id: string): TemporaryStorageData | null {
    return store.get("TemporaryStorageData", id) as TemporaryStorageData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get drum(): string {
    let value = this.get("drum");
    return value.toString();
  }

  set drum(value: string) {
    this.set("drum", Value.fromString(value));
  }

  get date_unix(): BigInt | null {
    let value = this.get("date_unix");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set date_unix(value: BigInt | null) {
    if (value === null) {
      this.unset("date_unix");
    } else {
      this.set("date_unix", Value.fromBigInt(value as BigInt));
    }
  }

  get storage_id(): BigInt | null {
    let value = this.get("storage_id");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set storage_id(value: BigInt | null) {
    if (value === null) {
      this.unset("storage_id");
    } else {
      this.set("storage_id", Value.fromBigInt(value as BigInt));
    }
  }

  get longitude(): BigInt | null {
    let value = this.get("longitude");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set longitude(value: BigInt | null) {
    if (value === null) {
      this.unset("longitude");
    } else {
      this.set("longitude", Value.fromBigInt(value as BigInt));
    }
  }

  get latitude(): BigInt | null {
    let value = this.get("latitude");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set latitude(value: BigInt | null) {
    if (value === null) {
      this.unset("latitude");
    } else {
      this.set("latitude", Value.fromBigInt(value as BigInt));
    }
  }

  get storage_schedule(): string | null {
    let value = this.get("storage_schedule");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set storage_schedule(value: string | null) {
    if (value === null) {
      this.unset("storage_schedule");
    } else {
      this.set("storage_schedule", Value.fromString(value as string));
    }
  }
}

export class TakingOverData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TakingOverData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TakingOverData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TakingOverData", id.toString(), this);
  }

  static load(id: string): TakingOverData | null {
    return store.get("TakingOverData", id) as TakingOverData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get drum(): string {
    let value = this.get("drum");
    return value.toString();
  }

  set drum(value: string) {
    this.set("drum", Value.fromString(value));
  }

  get date_unix(): BigInt | null {
    let value = this.get("date_unix");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set date_unix(value: BigInt | null) {
    if (value === null) {
      this.unset("date_unix");
    } else {
      this.set("date_unix", Value.fromBigInt(value as BigInt));
    }
  }

  get acquisition(): string | null {
    let value = this.get("acquisition");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set acquisition(value: string | null) {
    if (value === null) {
      this.unset("acquisition");
    } else {
      this.set("acquisition", Value.fromString(value as string));
    }
  }

  get transferee(): string | null {
    let value = this.get("transferee");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transferee(value: string | null) {
    if (value === null) {
      this.unset("transferee");
    } else {
      this.set("transferee", Value.fromString(value as string));
    }
  }

  get transportation_schedule(): string | null {
    let value = this.get("transportation_schedule");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set transportation_schedule(value: string | null) {
    if (value === null) {
      this.unset("transportation_schedule");
    } else {
      this.set("transportation_schedule", Value.fromString(value as string));
    }
  }

  get wasteAcceptanceRequest(): string | null {
    let value = this.get("wasteAcceptanceRequest");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set wasteAcceptanceRequest(value: string | null) {
    if (value === null) {
      this.unset("wasteAcceptanceRequest");
    } else {
      this.set("wasteAcceptanceRequest", Value.fromString(value as string));
    }
  }
}
